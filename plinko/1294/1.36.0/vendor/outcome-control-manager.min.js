// Generated by Haxe 4.3.2
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.now = function() {
	return Date.now();
};
var Lambda = function() { };
Lambda.__name__ = true;
Lambda.exists = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			return true;
		}
	}
	return false;
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = true;
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	unwrap: function() {
		return this.__nativeException;
	}
	,get_native: function() {
		return this.__nativeException;
	}
});
var haxe_Int32 = {};
haxe_Int32.ucompare = function(a,b) {
	if(a < 0) {
		if(b < 0) {
			return ~b - ~a | 0;
		} else {
			return 1;
		}
	}
	if(b < 0) {
		return -1;
	} else {
		return a - b | 0;
	}
};
var haxe_Int64 = {};
haxe_Int64.toString = function(this1) {
	var i = this1;
	var b_high = 0;
	var b_low = 0;
	if(i.high == b_high && i.low == b_low) {
		return "0";
	}
	var str = "";
	var neg = false;
	if(i.high < 0) {
		neg = true;
	}
	var ten = new haxe__$Int64__$_$_$Int64(0,10);
	while(true) {
		var b_high = 0;
		var b_low = 0;
		if(!(i.high != b_high || i.low != b_low)) {
			break;
		}
		var r = haxe_Int64.divMod(i,ten);
		if(r.modulus.high < 0) {
			var x = r.modulus;
			var high = ~x.high;
			var low = ~x.low + 1 | 0;
			if(low == 0) {
				var ret = high++;
				high = high | 0;
			}
			var this_high = high;
			var this_low = low;
			str = this_low + str;
			var x1 = r.quotient;
			var high1 = ~x1.high;
			var low1 = ~x1.low + 1 | 0;
			if(low1 == 0) {
				var ret1 = high1++;
				high1 = high1 | 0;
			}
			i = new haxe__$Int64__$_$_$Int64(high1,low1);
		} else {
			str = r.modulus.low + str;
			i = r.quotient;
		}
	}
	if(neg) {
		str = "-" + str;
	}
	return str;
};
haxe_Int64.divMod = function(dividend,divisor) {
	if(divisor.high == 0) {
		switch(divisor.low) {
		case 0:
			throw haxe_Exception.thrown("divide by zero");
		case 1:
			return { quotient : new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low), modulus : new haxe__$Int64__$_$_$Int64(0,0)};
		}
	}
	var divSign = dividend.high < 0 != divisor.high < 0;
	var modulus;
	if(dividend.high < 0) {
		var high = ~dividend.high;
		var low = ~dividend.low + 1 | 0;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		modulus = new haxe__$Int64__$_$_$Int64(high,low);
	} else {
		modulus = new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low);
	}
	if(divisor.high < 0) {
		var high = ~divisor.high;
		var low = ~divisor.low + 1 | 0;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		divisor = new haxe__$Int64__$_$_$Int64(high,low);
	}
	var quotient = new haxe__$Int64__$_$_$Int64(0,0);
	var mask = new haxe__$Int64__$_$_$Int64(0,1);
	while(!(divisor.high < 0)) {
		var v = haxe_Int32.ucompare(divisor.high,modulus.high);
		var cmp = v != 0 ? v : haxe_Int32.ucompare(divisor.low,modulus.low);
		var b = 1;
		b &= 63;
		divisor = b == 0 ? new haxe__$Int64__$_$_$Int64(divisor.high,divisor.low) : b < 32 ? new haxe__$Int64__$_$_$Int64(divisor.high << b | divisor.low >>> 32 - b,divisor.low << b) : new haxe__$Int64__$_$_$Int64(divisor.low << b - 32,0);
		var b1 = 1;
		b1 &= 63;
		mask = b1 == 0 ? new haxe__$Int64__$_$_$Int64(mask.high,mask.low) : b1 < 32 ? new haxe__$Int64__$_$_$Int64(mask.high << b1 | mask.low >>> 32 - b1,mask.low << b1) : new haxe__$Int64__$_$_$Int64(mask.low << b1 - 32,0);
		if(cmp >= 0) {
			break;
		}
	}
	while(true) {
		var b_high = 0;
		var b_low = 0;
		if(!(mask.high != b_high || mask.low != b_low)) {
			break;
		}
		var v = haxe_Int32.ucompare(modulus.high,divisor.high);
		if((v != 0 ? v : haxe_Int32.ucompare(modulus.low,divisor.low)) >= 0) {
			quotient = new haxe__$Int64__$_$_$Int64(quotient.high | mask.high,quotient.low | mask.low);
			var high = modulus.high - divisor.high | 0;
			var low = modulus.low - divisor.low | 0;
			if(haxe_Int32.ucompare(modulus.low,divisor.low) < 0) {
				var ret = high--;
				high = high | 0;
			}
			modulus = new haxe__$Int64__$_$_$Int64(high,low);
		}
		var b = 1;
		b &= 63;
		mask = b == 0 ? new haxe__$Int64__$_$_$Int64(mask.high,mask.low) : b < 32 ? new haxe__$Int64__$_$_$Int64(mask.high >>> b,mask.high << 32 - b | mask.low >>> b) : new haxe__$Int64__$_$_$Int64(0,mask.high >>> b - 32);
		var b1 = 1;
		b1 &= 63;
		divisor = b1 == 0 ? new haxe__$Int64__$_$_$Int64(divisor.high,divisor.low) : b1 < 32 ? new haxe__$Int64__$_$_$Int64(divisor.high >>> b1,divisor.high << 32 - b1 | divisor.low >>> b1) : new haxe__$Int64__$_$_$Int64(0,divisor.high >>> b1 - 32);
	}
	if(divSign) {
		var high = ~quotient.high;
		var low = ~quotient.low + 1 | 0;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		quotient = new haxe__$Int64__$_$_$Int64(high,low);
	}
	if(dividend.high < 0) {
		var high = ~modulus.high;
		var low = ~modulus.low + 1 | 0;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		modulus = new haxe__$Int64__$_$_$Int64(high,low);
	}
	return { quotient : quotient, modulus : modulus};
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
haxe__$Int64__$_$_$Int64.__name__ = true;
var haxe_Int64Helper = function() { };
haxe_Int64Helper.__name__ = true;
haxe_Int64Helper.parseString = function(sParam) {
	var base_high = 0;
	var base_low = 10;
	var current = new haxe__$Int64__$_$_$Int64(0,0);
	var multiplier = new haxe__$Int64__$_$_$Int64(0,1);
	var sIsNegative = false;
	var s = StringTools.trim(sParam);
	if(s.charAt(0) == "-") {
		sIsNegative = true;
		s = s.substring(1,s.length);
	}
	var len = s.length;
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		var digitInt = HxOverrides.cca(s,len - 1 - i) - 48;
		if(digitInt < 0 || digitInt > 9) {
			throw haxe_Exception.thrown("NumberFormatError");
		}
		if(digitInt != 0) {
			var digit_high = digitInt >> 31;
			var digit_low = digitInt;
			if(sIsNegative) {
				var mask = 65535;
				var al = multiplier.low & mask;
				var ah = multiplier.low >>> 16;
				var bl = digit_low & mask;
				var bh = digit_low >>> 16;
				var p00 = haxe_Int32._mul(al,bl);
				var p10 = haxe_Int32._mul(ah,bl);
				var p01 = haxe_Int32._mul(al,bh);
				var p11 = haxe_Int32._mul(ah,bh);
				var low = p00;
				var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
				p01 <<= 16;
				low = low + p01 | 0;
				if(haxe_Int32.ucompare(low,p01) < 0) {
					var ret = high++;
					high = high | 0;
				}
				p10 <<= 16;
				low = low + p10 | 0;
				if(haxe_Int32.ucompare(low,p10) < 0) {
					var ret1 = high++;
					high = high | 0;
				}
				high = high + (haxe_Int32._mul(multiplier.low,digit_high) + haxe_Int32._mul(multiplier.high,digit_low) | 0) | 0;
				var b_high = high;
				var b_low = low;
				var high1 = current.high - b_high | 0;
				var low1 = current.low - b_low | 0;
				if(haxe_Int32.ucompare(current.low,b_low) < 0) {
					var ret2 = high1--;
					high1 = high1 | 0;
				}
				current = new haxe__$Int64__$_$_$Int64(high1,low1);
				if(!(current.high < 0)) {
					throw haxe_Exception.thrown("NumberFormatError: Underflow");
				}
			} else {
				var mask1 = 65535;
				var al1 = multiplier.low & mask1;
				var ah1 = multiplier.low >>> 16;
				var bl1 = digit_low & mask1;
				var bh1 = digit_low >>> 16;
				var p001 = haxe_Int32._mul(al1,bl1);
				var p101 = haxe_Int32._mul(ah1,bl1);
				var p011 = haxe_Int32._mul(al1,bh1);
				var p111 = haxe_Int32._mul(ah1,bh1);
				var low2 = p001;
				var high2 = (p111 + (p011 >>> 16) | 0) + (p101 >>> 16) | 0;
				p011 <<= 16;
				low2 = low2 + p011 | 0;
				if(haxe_Int32.ucompare(low2,p011) < 0) {
					var ret3 = high2++;
					high2 = high2 | 0;
				}
				p101 <<= 16;
				low2 = low2 + p101 | 0;
				if(haxe_Int32.ucompare(low2,p101) < 0) {
					var ret4 = high2++;
					high2 = high2 | 0;
				}
				high2 = high2 + (haxe_Int32._mul(multiplier.low,digit_high) + haxe_Int32._mul(multiplier.high,digit_low) | 0) | 0;
				var b_high1 = high2;
				var b_low1 = low2;
				var high3 = current.high + b_high1 | 0;
				var low3 = current.low + b_low1 | 0;
				if(haxe_Int32.ucompare(low3,current.low) < 0) {
					var ret5 = high3++;
					high3 = high3 | 0;
				}
				current = new haxe__$Int64__$_$_$Int64(high3,low3);
				if(current.high < 0) {
					throw haxe_Exception.thrown("NumberFormatError: Overflow");
				}
			}
		}
		var mask2 = 65535;
		var al2 = multiplier.low & mask2;
		var ah2 = multiplier.low >>> 16;
		var bl2 = base_low & mask2;
		var bh2 = base_low >>> 16;
		var p002 = haxe_Int32._mul(al2,bl2);
		var p102 = haxe_Int32._mul(ah2,bl2);
		var p012 = haxe_Int32._mul(al2,bh2);
		var p112 = haxe_Int32._mul(ah2,bh2);
		var low4 = p002;
		var high4 = (p112 + (p012 >>> 16) | 0) + (p102 >>> 16) | 0;
		p012 <<= 16;
		low4 = low4 + p012 | 0;
		if(haxe_Int32.ucompare(low4,p012) < 0) {
			var ret6 = high4++;
			high4 = high4 | 0;
		}
		p102 <<= 16;
		low4 = low4 + p102 | 0;
		if(haxe_Int32.ucompare(low4,p102) < 0) {
			var ret7 = high4++;
			high4 = high4 | 0;
		}
		high4 = high4 + (haxe_Int32._mul(multiplier.low,base_high) + haxe_Int32._mul(multiplier.high,base_low) | 0) | 0;
		multiplier = new haxe__$Int64__$_$_$Int64(high4,low4);
	}
	return current;
};
var haxe_Log = function() { };
haxe_Log.__name__ = true;
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	unwrap: function() {
		return this.value;
	}
});
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = true;
var haxe_http_HttpBase = function(url) {
	this.url = url;
	this.headers = [];
	this.params = [];
	this.emptyOnData = $bind(this,this.onData);
};
haxe_http_HttpBase.__name__ = true;
haxe_http_HttpBase.prototype = {
	addHeader: function(header,value) {
		this.headers.push({ name : header, value : value});
		return this;
	}
	,onData: function(data) {
	}
	,onBytes: function(data) {
	}
	,onError: function(msg) {
	}
	,onStatus: function(status) {
	}
	,hasOnData: function() {
		return $bind(this,this.onData) != this.emptyOnData;
	}
	,success: function(data) {
		this.responseBytes = data;
		this.responseAsString = null;
		if(this.hasOnData()) {
			this.onData(this.get_responseData());
		}
		this.onBytes(this.responseBytes);
	}
	,get_responseData: function() {
		if(this.responseAsString == null && this.responseBytes != null) {
			this.responseAsString = this.responseBytes.getString(0,this.responseBytes.length,haxe_io_Encoding.UTF8);
		}
		return this.responseAsString;
	}
};
var haxe_http_HttpJs = function(url) {
	this.async = true;
	this.withCredentials = false;
	haxe_http_HttpBase.call(this,url);
};
haxe_http_HttpJs.__name__ = true;
haxe_http_HttpJs.__super__ = haxe_http_HttpBase;
haxe_http_HttpJs.prototype = $extend(haxe_http_HttpBase.prototype,{
	request: function(post) {
		var _gthis = this;
		this.responseAsString = null;
		this.responseBytes = null;
		this.responseHeaders = null;
		var r = this.req = js_Browser.createXMLHttpRequest();
		var onreadystatechange = function(_) {
			if(r.readyState != 4) {
				return;
			}
			var s;
			try {
				s = r.status;
			} catch( _g ) {
				s = null;
			}
			if(s == 0 && js_Browser.get_supported() && $global.location != null) {
				var protocol = $global.location.protocol.toLowerCase();
				var rlocalProtocol = new EReg("^(?:about|app|app-storage|.+-extension|file|res|widget):$","");
				var isLocal = rlocalProtocol.match(protocol);
				if(isLocal) {
					s = r.response != null ? 200 : 404;
				}
			}
			if(s == undefined) {
				s = null;
			}
			if(s != null) {
				_gthis.onStatus(s);
			}
			if(s != null && s >= 200 && s < 400) {
				_gthis.req = null;
				var headers = r.getAllResponseHeaders().split("\r\n");
				var _g = [];
				var _g1 = 0;
				var _g2 = headers;
				while(_g1 < _g2.length) {
					var v = _g2[_g1];
					++_g1;
					if(v != "") {
						_g.push(v);
					}
				}
				headers = _g;
				var onreadystatechange = new haxe_ds_StringMap();
				_gthis.responseHeaders = onreadystatechange;
				var _g = 0;
				while(_g < headers.length) {
					var hline = headers[_g];
					++_g;
					var a = hline.split(": ");
					var hname = a.shift();
					var hval = a.length == 1 ? a[0] : a.join(": ");
					hval = StringTools.ltrim(StringTools.rtrim(hval));
					_gthis.responseHeaders.h[hname] = hval;
				}
				_gthis.success(haxe_io_Bytes.ofData(r.response));
			} else if(s == null || s == 0 && r.response == null) {
				_gthis.req = null;
				_gthis.onError("Failed to connect or resolve host");
			} else if(s == null) {
				_gthis.req = null;
				var onreadystatechange = r.response != null ? haxe_io_Bytes.ofData(r.response) : null;
				_gthis.responseBytes = onreadystatechange;
				_gthis.onError("Http Error #" + r.status);
			} else {
				switch(s) {
				case 12007:
					_gthis.req = null;
					_gthis.onError("Unknown host");
					break;
				case 12029:
					_gthis.req = null;
					_gthis.onError("Failed to connect to host");
					break;
				default:
					_gthis.req = null;
					var onreadystatechange = r.response != null ? haxe_io_Bytes.ofData(r.response) : null;
					_gthis.responseBytes = onreadystatechange;
					_gthis.onError("Http Error #" + r.status);
				}
			}
		};
		if(this.async) {
			r.onreadystatechange = onreadystatechange;
		}
		var uri;
		var _g = this.postData;
		var _g1 = this.postBytes;
		if(_g == null) {
			if(_g1 == null) {
				uri = null;
			} else {
				var bytes = _g1;
				uri = new Blob([bytes.b.bufferValue]);
			}
		} else if(_g1 == null) {
			var str = _g;
			uri = str;
		} else {
			uri = null;
		}
		if(uri != null) {
			post = true;
		} else {
			var _g = 0;
			var _g1 = this.params;
			while(_g < _g1.length) {
				var p = _g1[_g];
				++_g;
				if(uri == null) {
					uri = "";
				} else {
					uri = (uri == null ? "null" : Std.string(uri)) + "&";
				}
				var s = p.name;
				var uri1 = (uri == null ? "null" : Std.string(uri)) + encodeURIComponent(s) + "=";
				var s1 = p.value;
				uri = uri1 + encodeURIComponent(s1);
			}
		}
		try {
			if(post) {
				r.open("POST",this.url,this.async);
			} else if(uri != null) {
				var question = this.url.split("?").length <= 1;
				r.open("GET",this.url + (question ? "?" : "&") + (uri == null ? "null" : Std.string(uri)),this.async);
				uri = null;
			} else {
				r.open("GET",this.url,this.async);
			}
			r.responseType = "arraybuffer";
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			this.req = null;
			this.onError(e.toString());
			return;
		}
		r.withCredentials = this.withCredentials;
		if(!Lambda.exists(this.headers,function(h) {
			return h.name == "Content-Type";
		}) && post && this.postData == null) {
			r.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
		}
		var _g = 0;
		var _g1 = this.headers;
		while(_g < _g1.length) {
			var h = _g1[_g];
			++_g;
			r.setRequestHeader(h.name,h.value);
		}
		r.send(uri);
		if(!this.async) {
			onreadystatechange(null);
		}
	}
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:true,__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:true,__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_Browser = function() { };
js_Browser.__name__ = true;
js_Browser.get_supported = function() {
	if(typeof(window) != "undefined" && typeof(window.location) != "undefined") {
		return typeof(window.location.protocol) == "string";
	} else {
		return false;
	}
};
js_Browser.createXMLHttpRequest = function() {
	if(typeof XMLHttpRequest != "undefined") {
		return new XMLHttpRequest();
	}
	if(typeof ActiveXObject != "undefined") {
		return new ActiveXObject("Microsoft.XMLHTTP");
	}
	throw haxe_Exception.thrown("Unable to create XMLHttpRequest object.");
};
var outcomecontrolmanager_Main = function() { };
outcomecontrolmanager_Main.__name__ = true;
outcomecontrolmanager_Main.main = function() {
	var outcomeControlManager = new outcomecontrolmanager_OutcomeControlManager();
};
var outcomecontrolmanager_OutcomeControlManager = function() {
	this._uiInitConfig = { };
	this._currentMousePosition = 0;
	this._minRngsContainerSize = 200;
	this._localStorageBetDataKey = "customRngsData";
	this._betAmount = haxe_Int64Helper.parseString("100");
	this._balance = haxe_Int64Helper.parseString("500000");
	this._eventType = "click";
	this._scenariosLoaded = false;
	this._casinoChannel = hacksawCasino.PubSub.getChannel("casino");
	this._uiChannel = hacksawCasino.PubSub.getChannel("ui");
	this._overlayElements = new outcomecontrolmanager_OverlayElements();
	this.subscribe();
	this._casinoChannel.publish("outcomeControlReady");
};
outcomecontrolmanager_OutcomeControlManager.__name__ = true;
outcomecontrolmanager_OutcomeControlManager.prototype = {
	getGameScenarios: function(mode,cb) {
		var _gthis = this;
		var httpRequest = new haxe_http_HttpJs("./scenarios/scenarios.json");
		httpRequest.addHeader("Content-Type","application/json");
		httpRequest.addHeader("Access-Control-Allow-Origin","*");
		httpRequest.onData = function(respdata) {
			var scenarioData = JSON.parse(respdata);
			_gthis._currentScenariosData = mode == "e2e" ? scenarioData.e2e : scenarioData.scenarios;
			_gthis._overlayElements.createRoundOutcomeOptions(_gthis._currentScenariosData);
			_gthis._scenariosLoaded = true;
			cb(_gthis._currentScenariosData);
		};
		httpRequest.onError = function(msg) {
			haxe_Log.trace("error ",{ fileName : "src/outcomecontrolmanager/OutcomeControlManager.hx", lineNumber : 66, className : "outcomecontrolmanager.OutcomeControlManager", methodName : "getGameScenarios", customParams : [msg]});
			var element = _gthis._overlayElements.get_overlayToggle();
			if(element != null) {
				element.classList.remove("is-visible");
			}
			cb(null);
		};
		httpRequest.request(false);
	}
	,addEventListeners: function() {
		var _gthis = this;
		this._overlayElements.addEventListener(this._overlayElements.get_saveButton(),this._eventType,function(e) {
			var outcomeSelect = _gthis._overlayElements.get_roundOutcomeSelect();
			var cheatcodeInput = _gthis._overlayElements.get_cheatcodeInput();
			var scenarioInput = _gthis._overlayElements.get_scenarioInput();
			var outcomeOptions = outcomeSelect.options;
			var selectedOutcome = outcomeOptions[outcomeSelect.selectedIndex].value;
			var enteredCheatcode = cheatcodeInput.value;
			if(enteredCheatcode != "") {
				var param = "&cheatcode=" + enteredCheatcode;
				var tmp = _gthis.removeURLParameter(window.location.href,"cheatcode");
				window.location.href = tmp + param;
			} else if(scenarioInput.value != "") {
				var dummyScenario = _gthis.getDummyScenarioData(JSON.parse(scenarioInput.value));
				var scenarioData = Reflect.field(dummyScenario,"custom");
				var ba = scenarioData.bets[0].bet.body.round.events[0].ba;
				if(ba != 0) {
					var tmp = haxe_Int64Helper.parseString(Std.string(ba));
					_gthis._betAmount = tmp;
					_gthis._uiChannel.publish("changeBetLevel",{ action : "fromvalue", value : ba});
				}
				_gthis._casinoChannel.publish("setScenario",{ scenarioName : "custom", loadedScenarios : dummyScenario});
			} else if(selectedOutcome != null) {
				var reauthOption = window.document.querySelector("input[name=\"reauth\"]:checked");
				var selectedReauthValue = reauthOption.value;
				if(Std.parseInt(selectedReauthValue) == 1) {
					var params = "&scenariooutcome=" + selectedOutcome + "&scenarioauth=" + selectedReauthValue;
					window.location.href = window.location.href + params;
				} else {
					var scenarioData = Reflect.field(_gthis._currentScenariosData,selectedOutcome);
					var ba = scenarioData.bets[0].bet.body.round.events[0].ba;
					if(ba != 0) {
						var tmp = haxe_Int64Helper.parseString(Std.string(ba));
						_gthis._betAmount = tmp;
						_gthis._uiChannel.publish("changeBetLevel",{ action : "fromvalue", value : ba});
					}
					_gthis._casinoChannel.publish("setScenario",{ scenarioName : selectedOutcome, loadedScenarios : _gthis._currentScenariosData});
				}
			}
			var element = _gthis._overlayElements.get_outcomeOverlay();
			if(element != null) {
				element.classList.remove("is-visible");
			}
			var element = _gthis._overlayElements.get_overlayToggle();
			if(element != null) {
				element.classList.add("is-visible");
			}
		},false);
		this._overlayElements.addEventListener(this._overlayElements.get_cancelButton(),this._eventType,function() {
			var element = _gthis._overlayElements.get_outcomeOverlay();
			if(element != null) {
				element.classList.remove("is-visible");
			}
			var element = _gthis._overlayElements.get_overlayToggle();
			if(element != null) {
				element.classList.add("is-visible");
			}
		},false);
		this._overlayElements.addEventListener(this._overlayElements.get_localFunButton(),this._eventType,function() {
			var envParam = "&env=http://localhost:17778/api";
			var tmp = _gthis.removeURLParameter(window.location.href,"env");
			window.location.href = tmp + envParam;
		},false);
		this._overlayElements.addEventListener(this._overlayElements.get_localRealButton(),this._eventType,function() {
			var envParam = "&env=http://localhost:17779/api";
			var tmp = _gthis.removeURLParameter(window.location.href,"env");
			window.location.href = tmp + envParam;
		},false);
		this._overlayElements.addEventListener(this._overlayElements.get_overlayToggle(),this._eventType,$bind(this,this.handleToggletouchstart),false);
		window.document.addEventListener("keydown",function(e) {
			if(_gthis._scenariosLoaded == true && e.keyCode == 27) {
				var element = _gthis._overlayElements.get_overlayToggle();
				var visible = null;
				if(element != null) {
					if(visible == null) {
						if(element.classList.contains("is-visible")) {
							element.classList.remove("is-visible");
						} else {
							element.classList.add("is-visible");
						}
					} else if(visible == true) {
						element.classList.add("is-visible");
					} else {
						element.classList.remove("is-visible");
					}
				}
			}
		},false);
		this._overlayElements.addEventListener(this._overlayElements.get_customRngsDataWidgetCloseBtn(),this._eventType,$bind(this,this.resetCustomRngsData),false);
		this._overlayElements.addEventListener(this._overlayElements.get_customRngsDatatInput(),"input",$bind(this,this.onInputRngsData),false);
		var balanceTrigger = window.document.getElementById("BalanceItem");
		if(balanceTrigger != null) {
			balanceTrigger.addEventListener(this._eventType,function(e) {
				if(_gthis._scenariosLoaded == true) {
					var element = _gthis._overlayElements.get_overlayToggle();
					var visible = null;
					if(element != null) {
						if(visible == null) {
							if(element.classList.contains("is-visible")) {
								element.classList.remove("is-visible");
							} else {
								element.classList.add("is-visible");
							}
						} else if(visible == true) {
							element.classList.add("is-visible");
						} else {
							element.classList.remove("is-visible");
						}
					}
				}
			},false);
		}
		if(this._uiInitConfig.deployEnv != null && (this._uiInitConfig.deployEnv == "{local}" || this._uiInitConfig.deployEnv == "dev")) {
			var customRngsDataWidgetToggler = window.document.getElementById("BetAmountItem");
			if(customRngsDataWidgetToggler != null) {
				customRngsDataWidgetToggler.addEventListener(this._eventType,$bind(this,this.onToggleRngsWidget),false);
			}
			if(this._overlayElements.get_customRngsDataWidgetResizer() != null) {
				this._overlayElements.get_customRngsDataWidgetResizer().addEventListener("mousedown",$bind(this,this.reziserMouseDownHandler),false);
			}
		}
	}
	,reziserMouseDownHandler: function(e) {
		var _gthis = this;
		e.preventDefault();
		this._currentMousePosition = e.x | 0;
		window.document.addEventListener("mousemove",$bind(this,this.resizeHandler),false);
		window.document.addEventListener("mouseup",function() {
			window.document.removeEventListener("mousemove",$bind(_gthis,_gthis.resizeHandler),false);
		},false);
	}
	,resizeHandler: function(event) {
		event.preventDefault();
		var deltaX = this._currentMousePosition - (event.x | 0);
		this._currentMousePosition = event.x | 0;
		var width = Std.parseInt(window.getComputedStyle(this._overlayElements.get_customRngsDataWidget(),"").width) + deltaX;
		var tmp = Std.string(width > this._minRngsContainerSize ? width : this._minRngsContainerSize);
		this._overlayElements.get_customRngsDataWidget().style.width = tmp + "px";
	}
	,removeURLParameter: function(url,parameter) {
		var urlparts = url.split("?");
		var r = new EReg("[&;]","g");
		var _g = [];
		var _g1 = 0;
		var _g2 = r.split(urlparts[1]);
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(v.indexOf(parameter) == -1) {
				_g.push(v);
			}
		}
		var params = _g;
		return urlparts[0] + (params.length > 0 ? "?" + params.join("&") : "");
	}
	,handleToggletouchstart: function() {
		var element = this._overlayElements.get_outcomeOverlay();
		if(element != null) {
			element.classList.add("is-visible");
		}
		var element = this._overlayElements.get_overlayToggle();
		if(element != null) {
			element.classList.remove("is-visible");
		}
	}
	,updateBalance: function(balanceData) {
		this._balance = balanceData.balance;
	}
	,updateBetAmount: function(betData) {
		this._betAmount = betData.bet;
	}
	,validateRngsDataInput: function(str) {
		var isMatch = false;
		var regex = new EReg("^\\d+(,\\d+)*$","ig");
		isMatch = regex.match(str);
		if(!isMatch) {
			console.warn("rngs data is not in valid format");
		}
		return isMatch;
	}
	,subscribe: function() {
		var _gthis = this;
		this._casinoChannel.subscribe("initData",function(data) {
			if(data != null) {
				_gthis._uiInitConfig.gameType = data.gameType;
				_gthis._uiInitConfig.channel = data.channel;
				_gthis._uiInitConfig.deployEnv = data.deployEnv;
				_gthis._uiInitConfig.gameId = data.gameId;
				_gthis._uiInitConfig.language = data.language;
				_gthis._uiInitConfig.mode = data.mode;
				_gthis._uiInitConfig.partner = data.partner;
			}
			_gthis.addEventListeners();
		});
		this._casinoChannel.subscribe("initOutcomeManager",function(data) {
			_gthis.getGameScenarios(data.mode,function(scenarioData) {
				if(scenarioData != null && data != null && data.scenarioOutcome != null) {
					_gthis._casinoChannel.publish("gameScenariosLoaded",_gthis._currentScenariosData);
					_gthis._casinoChannel.publish("setScenario",{ scenarioName : data.scenarioOutcome});
				}
			});
		});
		this._casinoChannel.subscribe("initRngsDataManager",function(data) {
			if(data.mode != "prod") {
				_gthis._localStorageIdentifier = data.localStorageIdentifier;
				var key = _gthis._localStorageBetDataKey;
				var identifier = _gthis._localStorageIdentifier;
				var storedInputData;
				try {
					var storageKey = identifier != null ? key + "_" + identifier : key;
					storedInputData = window.localStorage.getItem(storageKey);
				} catch( _g ) {
					storedInputData = "";
				}
				var storedInputData1 = storedInputData;
				_gthis._overlayElements.get_customRngsDatatInput().value = "";
				if(storedInputData1 != null && _gthis.validateRngsDataInput(storedInputData1)) {
					_gthis._overlayElements.get_customRngsDatatInput().value = storedInputData1;
				}
			}
		});
		this._uiChannel.subscribe("updateBalance",function(data) {
			_gthis.updateBalance(data);
		});
		this._uiChannel.subscribe("updateBetAmount",function(data) {
			_gthis.updateBetAmount(data);
		});
	}
	,getDummyScenarioData: function(roundData) {
		var body;
		var roundWin = haxe_Int64Helper.parseString("0");
		if(roundData.accountBalance != null) {
			body = roundData;
			var length = roundData.round.events.length;
			var awa = haxe_Int64Helper.parseString(Std.string(roundData.round.events[length - 1].awa));
			roundWin = awa;
		} else {
			var ba = haxe_Int64Helper.parseString(Std.string(roundData[0].ba));
			var b_high = 0;
			var b_low = 0;
			var v = ba.high - b_high | 0;
			if(v == 0) {
				v = haxe_Int32.ucompare(ba.low,b_low);
			}
			if((ba.high < 0 ? b_high < 0 ? v : -1 : b_high >= 0 ? v : 1) > 0) {
				var a = this._balance;
				var b = ba;
				var high = a.high - b.high | 0;
				var low = a.low - b.low | 0;
				if(haxe_Int32.ucompare(a.low,b.low) < 0) {
					var ret = high--;
					high = high | 0;
				}
				this._balance = new haxe__$Int64__$_$_$Int64(high,low);
			} else {
				var a = this._balance;
				var b = this._betAmount;
				var high = a.high - b.high | 0;
				var low = a.low - b.low | 0;
				if(haxe_Int32.ucompare(a.low,b.low) < 0) {
					var ret = high--;
					high = high | 0;
				}
				this._balance = new haxe__$Int64__$_$_$Int64(high,low);
			}
			var length = roundData.length;
			roundWin = haxe_Int64Helper.parseString(Std.string(roundData[length - 1].awa));
			var balanceString = haxe_Int64.toString(this._balance);
			body = { "accountBalance" : { "balance" : balanceString, "currencyCode" : "EUR"}, "statusCode" : 0, "statusMessage" : "", "offer" : null, "round" : { "status" : "wfwpc", "roundId" : 999, "possibleActions" : [], "events" : roundData}};
		}
		var a = this._balance;
		var b = roundWin;
		var high = a.high + b.high | 0;
		var low = a.low + b.low | 0;
		if(haxe_Int32.ucompare(low,a.low) < 0) {
			var ret = high++;
			high = high | 0;
		}
		var confirmBalance = new haxe__$Int64__$_$_$Int64(high,low);
		var confirmBalanceString = haxe_Int64.toString(confirmBalance);
		return { custom : { auth : { status : 200, headers : { "Access-Control-Allow-Origin" : "*", "Content-Type" : "application/json; charset=utf-8", "Date" : "Thu, 23 Nov 2017 14:42:54 GMT", "Server" : "Kestrel"}, body : null}, paytable : { status : 200, headers : { "Access-Control-Allow-Origin" : "*", "Content-Type" : "application/json; charset=utf-8", "Date" : "Thu, 23 Nov 2017 14:42:54 GMT", "Server" : "Kestrel"}, body : { data : null}}, bets : [{ bet : { "status" : 200, "headers" : { "Date" : "Thu, 23 Nov 2017 14:42:54 GMT", "Content-Type" : "application/json; charset=utf-8", "Server" : "Kestrel", "Access-Control-Allow-Origin" : "*"}, "body" : body}, confirm : { "status" : 200, "headers" : { "Date" : "Thu, 23 Nov 2017 14:42:54 GMT", "Content-Type" : "application/json; charset=utf-8", "Server" : "Kestrel", "Access-Control-Allow-Origin" : "*"}, "body" : { "statusCode" : "0", "statusMessage" : "", "accountBalance" : { "currencyCode" : "EUR", "balance" : confirmBalanceString}, "round" : { "status" : "completed", "jackpotWin" : null, "roundId" : 999, "possibleActions" : [], "events" : []}, "offer" : null}}}]}};
	}
	,onToggleRngsWidget: function(passToBetRequest) {
		if(passToBetRequest == null) {
			passToBetRequest = false;
		}
		var element = this._overlayElements.get_customRngsDataWidget();
		var visible = null;
		if(element != null) {
			if(visible == null) {
				if(element.classList.contains("is-visible")) {
					element.classList.remove("is-visible");
				} else {
					element.classList.add("is-visible");
				}
			} else if(visible == true) {
				element.classList.add("is-visible");
			} else {
				element.classList.remove("is-visible");
			}
		}
		var rngsData = { isAvailable : this._overlayElements.get_customRngsDataWidget().classList.contains("is-visible"), value : null};
		if(this._overlayElements.get_customRngsDatatInput().value != "" && this.validateRngsDataInput(this._overlayElements.get_customRngsDatatInput().value)) {
			rngsData.value = this._overlayElements.get_customRngsDatatInput().value;
		}
		this._casinoChannel.publish("setRngsData",rngsData);
	}
	,resetCustomRngsData: function() {
		this._overlayElements.get_customRngsDatatInput().value = "";
		var key = this._localStorageBetDataKey;
		var identifier = this._localStorageIdentifier;
		try {
			var storageKey = identifier != null ? key + "_" + identifier : key;
			window.localStorage.setItem(storageKey,"");
		} catch( _g ) {
		}
		var rngsData = { isAvailable : true, value : null};
		this._casinoChannel.publish("setRngsData",rngsData);
	}
	,onInputRngsData: function() {
		var inputData = this._overlayElements.get_customRngsDatatInput().value;
		var isValid = this.validateRngsDataInput(inputData);
		if(isValid) {
			var key = this._localStorageBetDataKey;
			var identifier = this._localStorageIdentifier;
			try {
				var storageKey = identifier != null ? key + "_" + identifier : key;
				window.localStorage.setItem(storageKey,inputData);
			} catch( _g ) {
			}
			var rngsData = { isAvailable : true, value : inputData};
			this._casinoChannel.publish("setRngsData",rngsData);
		}
		var element = this._overlayElements.get_customRngsDatatInput();
		var active = !isValid && inputData.length > 0;
		if(element != null) {
			if(active == null) {
				if(element.classList.contains("invalid")) {
					element.classList.remove("invalid");
				} else {
					element.classList.add("invalid");
				}
			} else if(active) {
				element.classList.add("invalid");
			} else {
				element.classList.remove("invalid");
			}
		}
	}
};
var outcomecontrolmanager_OverlayElements = function() {
	this.createOverlay();
	this.createCustomRngsDataWidget();
	this.createStyles();
};
outcomecontrolmanager_OverlayElements.__name__ = true;
outcomecontrolmanager_OverlayElements.prototype = {
	createOverlay: function() {
		var overlayToggle = window.document.createElement("div");
		overlayToggle.id = "OverlayToggle";
		overlayToggle.className = "OverlayToggle";
		overlayToggle.innerHTML = "Scenario mode";
		var overlayDiv = window.document.createElement("div");
		overlayDiv.id = "OutcomeOverlay";
		overlayDiv.className = "OutcomeOverlay";
		var title = window.document.createElement("h3");
		title.className = "Title";
		title.innerHTML = "OUTCOMES";
		var saveButton = window.document.createElement("button");
		saveButton.id = "SaveButton";
		saveButton.innerHTML = "SAVE";
		var cancelButton = window.document.createElement("button");
		cancelButton.id = "CancelButton";
		cancelButton.innerHTML = "CANCEL";
		var localFunButton = window.document.createElement("button");
		localFunButton.id = "LocalFunButton";
		localFunButton.innerHTML = "LF";
		var localRealButton = window.document.createElement("button");
		localRealButton.id = "LocalRealButton";
		localRealButton.innerHTML = "LR";
		overlayDiv.appendChild(title);
		overlayDiv.appendChild(cancelButton);
		overlayDiv.appendChild(saveButton);
		overlayDiv.appendChild(localFunButton);
		overlayDiv.appendChild(localRealButton);
		window.document.body.appendChild(overlayToggle);
		window.document.body.appendChild(overlayDiv);
		this.createOutcomesSections();
	}
	,createOutcomesSections: function() {
		this.createRoundOutcomeSection();
		this.createCheatCodeSection();
		this.createScenarioSection();
	}
	,createRoundOutcomeSection: function() {
		var roundScenariosDiv = window.document.createElement("div");
		roundScenariosDiv.id = "RoundOutcomesSection";
		roundScenariosDiv.className = "OutcomeSection RoundOutcomes";
		var sectionTitleLabel = window.document.createElement("label");
		sectionTitleLabel.className = "SectionTitle";
		sectionTitleLabel.innerHTML = "Round Outcomes";
		sectionTitleLabel.setAttribute("for","RoundOutcomeSelect");
		var outcomeSelect = window.document.createElement("select");
		outcomeSelect.id = "RoundOutcomeSelect";
		outcomeSelect.name = "roundOutcome";
		roundScenariosDiv.appendChild(sectionTitleLabel);
		roundScenariosDiv.appendChild(outcomeSelect);
		this.get_outcomeOverlay().appendChild(roundScenariosDiv);
		var sectionTitleDiv = window.document.createElement("div");
		sectionTitleDiv.className = "SectionTitle";
		sectionTitleDiv.innerHTML = "Re-authenticate";
		var reauthOption1Label = window.document.createElement("label");
		reauthOption1Label.htmlFor = "reauthno";
		reauthOption1Label.innerHTML = "No";
		reauthOption1Label.onclick = null;
		var reauthOption1 = window.document.createElement("input");
		reauthOption1.id = "reauthno";
		reauthOption1.name = "reauth";
		reauthOption1.value = "0";
		reauthOption1.type = "radio";
		reauthOption1.checked = true;
		var reauthOption2Label = window.document.createElement("label");
		reauthOption2Label.htmlFor = "reauthyes";
		reauthOption2Label.innerHTML = "Yes";
		reauthOption2Label.onclick = null;
		var reauthOption2 = window.document.createElement("input");
		reauthOption2.id = "reauthyes";
		reauthOption2.name = "reauth";
		reauthOption2.value = "1";
		reauthOption2.type = "radio";
		roundScenariosDiv.appendChild(sectionTitleDiv);
		roundScenariosDiv.appendChild(reauthOption1Label);
		roundScenariosDiv.appendChild(reauthOption1);
		roundScenariosDiv.appendChild(reauthOption2Label);
		roundScenariosDiv.appendChild(reauthOption2);
		this.get_outcomeOverlay().appendChild(roundScenariosDiv);
	}
	,createCheatCodeSection: function() {
		var cheatcodeDiv = window.document.createElement("div");
		cheatcodeDiv.id = "CheatcodeSection";
		cheatcodeDiv.className = "OutcomeSection Cheatcode";
		var sectionTitleLabel = window.document.createElement("label");
		sectionTitleLabel.className = "SectionTitle";
		sectionTitleLabel.innerHTML = "Cheatcode";
		sectionTitleLabel.setAttribute("for","CheatcodeInput");
		var cheatcodeInput = window.document.createElement("input");
		cheatcodeInput.id = "CheatcodeInput";
		cheatcodeInput.name = "cheatcode";
		cheatcodeInput.type = "text";
		cheatcodeDiv.appendChild(sectionTitleLabel);
		cheatcodeDiv.appendChild(cheatcodeInput);
		this.get_outcomeOverlay().appendChild(cheatcodeDiv);
	}
	,createScenarioSection: function() {
		var scenarioDiv = window.document.createElement("div");
		scenarioDiv.id = "ScenarioSection";
		scenarioDiv.className = "OutcomeSection Scenario";
		var sectionTitleLabel = window.document.createElement("label");
		sectionTitleLabel.className = "SectionTitle";
		sectionTitleLabel.innerHTML = "Scenario Input";
		sectionTitleLabel.setAttribute("for","ScenarioInput");
		var scenarioInput = window.document.createElement("textarea");
		scenarioInput.id = "ScenarioInput";
		scenarioInput.name = "scenario";
		scenarioDiv.appendChild(sectionTitleLabel);
		scenarioDiv.appendChild(scenarioInput);
		this.get_outcomeOverlay().appendChild(scenarioDiv);
	}
	,createRoundOutcomeOptions: function(scenarios) {
		var scenarioFields = Reflect.fields(scenarios);
		var _g = 0;
		while(_g < scenarioFields.length) {
			var field = scenarioFields[_g];
			++_g;
			var option = window.document.createElement("option");
			option.value = field;
			option.innerHTML = field;
			this.get_roundOutcomeSelect().appendChild(option);
		}
	}
	,createRngsWidgetFieldset: function() {
		var fieldsetDiv = window.document.createElement("div");
		fieldsetDiv.className = "Fieldset";
		var fieldsetGroupDiv = window.document.createElement("div");
		fieldsetGroupDiv.className = "Fieldset__input-group";
		var fieldsetContainerDiv = window.document.createElement("div");
		fieldsetContainerDiv.className = "Fieldset__input-container";
		var inputGroupDiv = window.document.createElement("div");
		inputGroupDiv.className = "Input__group";
		var inputWrapperDiv = window.document.createElement("div");
		inputWrapperDiv.className = "Input__wrapper";
		var inputContainerDiv = window.document.createElement("div");
		inputContainerDiv.className = "Input__container Input__container--branded";
		var inputField = window.document.createElement("input");
		inputField.className = "Input__field";
		inputField.id = "CustomRngsDatatInput";
		inputField.name = "customRngsDatatInput";
		inputField.type = "text";
		inputField.autocomplete = "off";
		inputField.maxLength = 200000;
		inputContainerDiv.appendChild(inputField);
		inputWrapperDiv.appendChild(inputContainerDiv);
		inputGroupDiv.appendChild(inputWrapperDiv);
		fieldsetContainerDiv.appendChild(inputGroupDiv);
		fieldsetGroupDiv.appendChild(fieldsetContainerDiv);
		fieldsetDiv.appendChild(fieldsetGroupDiv);
		return fieldsetDiv;
	}
	,createCustomRngsDataWidget: function() {
		var widgetDiv = window.document.createElement("div");
		widgetDiv.id = "CustomRngsDataWidget";
		widgetDiv.className = "CustomRngsDataWidget";
		var widgetContainerResizer = window.document.createElement("div");
		widgetContainerResizer.className = "CustomRngsDataWidget__resizer";
		widgetContainerResizer.id = "CustomRngsDataWidgetResizer";
		var widgetDivInner = window.document.createElement("div");
		widgetDivInner.className = "CustomRngsDataWidget__inner";
		var widgetHeader = window.document.createElement("div");
		widgetHeader.className = "CustomRngsDataWidget__header divider-bottom";
		var title = window.document.createElement("p");
		title.className = "title";
		title.innerText = "Custom RNG Data";
		var widgetBody = window.document.createElement("div");
		widgetBody.className = "CustomRngsDataWidget__body divider-bottom";
		var fieldset = this.createRngsWidgetFieldset();
		var widgetFooter = window.document.createElement("div");
		widgetFooter.className = "CustomRngsDataWidget__footer";
		var closeButton = window.document.createElement("button");
		closeButton.id = "CustomRngsDataWidgetCloseBtn";
		closeButton.className = "CustomRngsDataWidget__close-button";
		closeButton.innerText = "Reset";
		widgetHeader.appendChild(title);
		widgetBody.appendChild(fieldset);
		widgetFooter.appendChild(closeButton);
		widgetDivInner.appendChild(widgetHeader);
		widgetDivInner.appendChild(widgetBody);
		widgetDivInner.appendChild(widgetFooter);
		widgetDiv.appendChild(widgetContainerResizer);
		widgetDiv.appendChild(widgetDivInner);
		window.document.body.appendChild(widgetDiv);
	}
	,addEventListener: function(element,type,listener,capture) {
		if(capture == null) {
			capture = false;
		}
		if(element != null) {
			var types = type.split(" ");
			var _g = 0;
			while(_g < types.length) {
				var t = types[_g];
				++_g;
				element.addEventListener(t,listener,capture);
			}
		}
	}
	,createStyles: function() {
		var cssStylesOutcomeOverlay = ".OutcomeOverlay{display:none}.OutcomeOverlay.is-visible{box-sizing:border-box;display:flex}.OutcomeOverlay{background-color:rgba(0,0,0,.9);padding:20px}.OutcomeSection{background-color:#fff;padding:20px}.Title{margin:0}.OutcomeOverlay button,.Title{color:#fff;text-transform:uppercase;text-align:center}.OutcomeOverlay{flex-flow:column;align-items:center;position:absolute;top:0;left:0;height:100%;width:100%;z-index:10}.OutcomeSection{border-radius:5px;margin:10px 0;max-width:90%;position:relative;width:300px;z-index:999}.SectionTitle{color:#000;display:block;font-weight:700;margin:5px 0}.OutcomeOverlay label{color:#000}.OutcomeOverlay input[type=radio]{cursor:pointer;margin-left:5px;margin-right:10px}.OutcomeOverlay select{height:30px}.OutcomeOverlay button{background:green;bottom:20px;align-items:center;border:0;border-radius:5px;box-sizing:border-box;cursor:pointer;display:flex;font-size:24px;font-weight:700;height:60px;margin:auto;padding:10px 30px;position:absolute;text-decoration:none;user-select:none;z-index:2;white-space:nowrap}.OverlayToggle.is-visible{display:inline-block}.OverlayToggle{cursor:pointer;background-color:black;border-radius:0 0 5px 0;color:#fff;font-weight:bold;text-transform:uppercase;display:none;padding:10px 20px;position:absolute;top:0;left:0px}#SaveButton{margin-left:150px}#CancelButton{background:grey;margin-left:-140px}input:not([type=radio]),select,textarea{border-radius:5px;box-sizing:border-box;min-height:30px;outline:0;width:100%}#LocalFunButton{position: fixed;top: 0;left: 0;margin: 10px;}#LocalRealButton{position: fixed;top: 0;right: 0;margin: 10px;}@media screen and (max-width: 600px) {#LocalFunButton, #LocalRealButton {display:none;}}";
		var cssStylesCustomRngsDataWidget = ".CustomRngsDataWidget__close-button{align-items:center;-webkit-appearance:none;-moz-appearance:none;appearance:none;background-color:transparent;border:0;cursor:pointer;display:flex;flex:1;font-family:HacksawUI,sans-serif;justify-content:center;margin:0;outline:0;color:#fff;overflow:hidden;padding:0;position:relative;text-align:center;touch-action:manipulation;vertical-align:middle;transition:background-color .2s ease,color .2s ease}.CustomRngsDataWidget__close-button:hover{color:green}.CustomRngsDataWidget__close-button:active{color:#003400}.CustomRngsDataWidget{align-items:stretch;justify-content:space-between;background-color:#171616;display:none;height:auto;justify-content:center;margin:0;overflow:hidden;padding:0;position:fixed;right:0;top:0;width:20em;width:calc(16em + 3vw)}.CustomRngsDataWidget.is-visible{display:flex}.CustomRngsDataWidget .title,.CustomRngsDataWidget .title--lg,.CustomRngsDataWidget .title--sm{color:#a4a4a4;display:block;font-family:HacksawUI,sans-serif;font-size:16px;font-weight:500;line-height:1.25;margin:0;text-align:left;width:100%}.CustomRngsDataWidget .title--sm{font-size:14px}.CustomRngsDataWidget .title--lg{font-size:18px}.CustomRngsDataWidget__resizer{cursor:ew-resize;background-image:radial-gradient(hsla(0,0%,53.3%,.5) 1px,transparent 0);background-size:3px 3px;background-position:-1px -1px;display:block;overflow:hidden;width:9px}.CustomRngsDataWidget__inner{align-items:center;display:flex;flex-direction:column;justify-content:flex-start;width:100%}.CustomRngsDataWidget__body,.CustomRngsDataWidget__footer,.CustomRngsDataWidget__header{box-sizing:border-box;display:flex;flex-grow:1;position:relative;padding:.75em;width:100%}.CustomRngsDataWidget__footer{padding:0}.CustomRngsDataWidget .divider-bottom:before{content:\"\";background-color:#5d5d60;bottom:0;height:1px;left:50%;opacity:.3;position:absolute;-webkit-transform:translateX(-50%);transform:translateX(-50%);width:150%}.CustomRngsDataWidget .Fieldset{margin:0 auto;width:100%}.CustomRngsDataWidget .Fieldset__legend{display:flex;margin:0 0 8px;text-align:left;width:100%}.CustomRngsDataWidget .Fieldset__legend .title{font-size:14px;font-weight:500;margin:0}.CustomRngsDataWidget .Fieldset__input-container,.CustomRngsDataWidget .Fieldset__legend{width:100%}.CustomRngsDataWidget__close-button{border-radius:16px;color:#a4a4a4;font-size:14px;font-weight:600;padding:.75em}.CustomRngsDataWidget__close-button:hover{color:#4bd0a6}.CustomRngsDataWidget__close-button:active{color:#2ba47e}.CustomRngsDataWidget .Input__wrapper{width:100%}.CustomRngsDataWidget .Input__container{display:flex;flex-flow:column nowrap;width:100%;flex-flow:row nowrap;flex:1}.CustomRngsDataWidget .Input__field{background-clip:padding-box;-webkit-appearance:none;background-color:#171616;border-radius:.25rem;border:1px solid #888;color:#a4a4a4;display:block;font-family:HacksawUI,sans-serif;font-size:14px;font-weight:500;line-height:1;outline:0;padding:6px 16px;position:relative;transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out;width:100%}.CustomRngsDataWidget .Input__field:focus,.CustomRngsDataWidget .Input__field:hover{box-shadow:0 0 0 2px rgba(75,208,166,.25);border-color:#959595}.CustomRngsDataWidget .Input__field.invalid,.CustomRngsDataWidget .Input__field.invalid:focus,.CustomRngsDataWidget .Input__field.invalid:hover{box-shadow:0 0 0 2px rgba(243,82,8,.25);border-color:#a23434}.CustomRngsDataWidget .Input__label{margin-bottom:8px}.CustomRngsDataWidget .Input__label .title{font-size:12px}.CustomRngsDataWidget .Input__input-group{align-items:center;display:flex;flex-flow:column;flex-basis:100%;flex:1;justify-content:center;margin:0 auto}";
		var cssStyles = cssStylesOutcomeOverlay + cssStylesCustomRngsDataWidget;
		var styleTag = window.document.createElement("style");
		styleTag.type = "text/css";
		styleTag.appendChild(window.document.createTextNode(cssStyles));
		window.document.head.appendChild(styleTag);
	}
	,get_outcomeOverlay: function() {
		if(this.outcomeOverlay == null) {
			this.outcomeOverlay = window.document.getElementById("OutcomeOverlay");
		}
		return this.outcomeOverlay;
	}
	,get_roundOutcomeSelect: function() {
		if(this.roundOutcomeSelect == null) {
			this.roundOutcomeSelect = window.document.getElementById("RoundOutcomeSelect");
		}
		return this.roundOutcomeSelect;
	}
	,get_saveButton: function() {
		if(this.saveButton == null) {
			this.saveButton = window.document.getElementById("SaveButton");
		}
		return this.saveButton;
	}
	,get_cancelButton: function() {
		if(this.cancelButton == null) {
			this.cancelButton = window.document.getElementById("CancelButton");
		}
		return this.cancelButton;
	}
	,get_localFunButton: function() {
		if(this.localFunButton == null) {
			this.localFunButton = window.document.getElementById("LocalFunButton");
		}
		return this.localFunButton;
	}
	,get_localRealButton: function() {
		if(this.localRealButton == null) {
			this.localRealButton = window.document.getElementById("LocalRealButton");
		}
		return this.localRealButton;
	}
	,get_overlayToggle: function() {
		if(this.overlayToggle == null) {
			this.overlayToggle = window.document.getElementById("OverlayToggle");
		}
		return this.overlayToggle;
	}
	,get_cheatcodeInput: function() {
		if(this.cheatcodeInput == null) {
			this.cheatcodeInput = window.document.getElementById("CheatcodeInput");
		}
		return this.cheatcodeInput;
	}
	,get_scenarioInput: function() {
		if(this.scenarioInput == null) {
			this.scenarioInput = window.document.getElementById("ScenarioInput");
		}
		return this.scenarioInput;
	}
	,get_customRngsDataWidget: function() {
		if(this.customRngsDataWidget == null) {
			this.customRngsDataWidget = window.document.getElementById("CustomRngsDataWidget");
		}
		return this.customRngsDataWidget;
	}
	,get_customRngsDatatInput: function() {
		if(this.customRngsDatatInput == null) {
			this.customRngsDatatInput = window.document.getElementById("CustomRngsDatatInput");
		}
		return this.customRngsDatatInput;
	}
	,get_customRngsDataWidgetCloseBtn: function() {
		if(this.customRngsDataWidgetCloseBtn == null) {
			this.customRngsDataWidgetCloseBtn = window.document.getElementById("CustomRngsDataWidgetCloseBtn");
		}
		return this.customRngsDataWidgetCloseBtn;
	}
	,get_customRngsDataWidgetResizer: function() {
		if(this.customRngsDataWidgetResizer == null) {
			this.customRngsDataWidgetResizer = window.document.getElementById("CustomRngsDataWidgetResizer");
		}
		return this.customRngsDataWidgetResizer;
	}
};
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.__name__ = true;
Array.__name__ = true;
js_Boot.__toStr = ({ }).toString;
haxe_Int32._mul = Math.imul != null ? Math.imul : function(a,b) {
	return a * (b & 65535) + (a * (b >>> 16) << 16 | 0) | 0;
};
outcomecontrolmanager_Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=outcome-control-manager.min.js.map